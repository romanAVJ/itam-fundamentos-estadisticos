geom_histogram(alpha = 0.8) +
ggtitle("Grades", str_glue("Sample size: {msize}")) +
annotate("text", x=-Inf, y=-Inf, hjust=0, vjust=0, label=str_glue("mean: {round(mu, 2)} \nstd: {round(sigma, 2)}")) +
xlab("Grade") + ylab("Density") +
theme_bw()
)
}
plt_hist_grades(df_enlace)
for(num in c(10, 100, 1000))
plt_hist_grades(df_enlace, num)
f_bootstrap_mean <- function(df, M, B){
# B: number of simulations
# M: size of the sample
#g: statistical function
# generate B samples of indexes
b_samples <- lapply(1:B, function(x) sample(df$esp_3, size = M, replace = TRUE))
# subset apply
gsubset_apply <- function(x){
return(mean(x))
}
# # get B samples of the stat
stats <- sapply(b_samples, gsubset_apply)
return(stats)
}
# simulation of the distribution
for(num in c(10, 100, 1000)){
set.seed(8)
boot_mean_grades <- f_bootstrap_mean(df_enlace, M=num, B=5000)
# mean and std
mean_grades <- mean(boot_mean_grades)
sd_grades <- sd(boot_mean_grades)
# plot
print(qplot(boot_mean_grades, bins = 50) +
geom_rect(aes(xmin = mean_grades - sd_grades, xmax = mean_grades + sd_grades, ymin = 0, ymax = Inf), fill = "pink", alpha = 0.01) +
geom_vline(xintercept = mean_grades, size = 1, color = "darkred") +
ggtitle("Distribution of the mean") +
annotate("text", x=-Inf, y=-Inf, hjust=0, vjust=0, label=str_glue("mean: {round(mean_grades)} \nstd: {round(sd_grades, 2)}")) +
xlab("Grade") + ylab("Density") +
theme_bw())
# std
cat("\n")
cat(str_glue("\n bootstrapped sd {round(sd_grades, 4)}"))
}
population_sd <- sqrt(sum((mean(df_enlace$esp_3) - df_enlace$esp_3)^2) / nrow(df_enlace))
cat("\n")
cat(str_glue("population sd {round(population_sd, 4)}"))
df_enlace |> nrow()
1/sqrt(199)
1/sqrt(1000)
1/sqrt(100)
59/sqrt(10)
59/sqrt(100)
59/sqrt(1000)
cos(pi/2)
pi
sin(pi/2)
sin(-0)
cos(pi)
knitr::opts_chunk$set(echo = FALSE, error = TRUE, include = TRUE)
library(tidyverse)
df_recidivism <- read_csv("../../data/Recidivism.csv")
print(head(df_recidivism))
print(glimpse(df_recidivism))
# get exact proportion
prop_recid <- mean(df_recidivism$Recid == 'Yes', na.rm = TRUE)
print(str_glue("proportion of resid: {round(prop_recid * 100, 2)}%"))
std_prop <- sqrt(prop_recid * (1 - prop_recid) * (nrow(df_recidivism))^(-1))
print(str_glue("std of prop of resid: {round(std_prop * 100, 8)}%"))
# function
f_bootstrap_proportion <- function(df, M, B){
# B: number of simulations
# M: size of the sample
#g: statistical function
# generate B samples of indexes
b_samples <- lapply(1:B, function(x) sample(df$Recid, size = M, replace = TRUE))
# subset apply
gsubset_apply <- function(x){
return(mean(x == 'Yes'))
}
# # get B samples of the stat
stats <- sapply(b_samples, gsubset_apply)
return(stats)
}
# generate bootstrap
M <- 25
B <- 500
bootstrap_proportion <- f_bootstrap_proportion(
df_recidivism,
M = M,
B = B
)
# plot histogram
df_plot <- tibble(
simulations = 1:B,
stats = bootstrap_proportion
)
std_bootstrap <- sd(bootstrap_proportion)
df_plot |>
ggplot(aes(stats)) +
geom_density(size = 1) +
geom_histogram(aes(y = ..density..), fill = "steelblue", alpha = 0.5, color = 'black') +
geom_vline(xintercept = mean(df_plot$stats), color = 'orange', size = 1) +
geom_vline(xintercept = prop_recid, color = 'darkgreen', size = 1, linetype = 2) +
ggtitle("Resample of proportion", str_glue("Tamaño de muestra {M}")) +
annotate("text", x=-Inf, y=-Inf, hjust=0, vjust=0, label=str_glue("std: {round(std_bootstrap * 100, 4)}%")) +
xlab("Proportion") + ylab("Density") +
scale_x_continuous(labels = scales::percent) +
theme_bw()
# generate bootstrap
M <- 250
B <- 500
bootstrap_proportion <- f_bootstrap_proportion(
df_recidivism,
M = M,
B = B
)
# plot histogram
df_plot <- tibble(
simulations = 1:B,
stats = bootstrap_proportion
)
std_bootstrap <- sd(bootstrap_proportion)
df_plot |>
ggplot(aes(stats)) +
geom_density(size = 1) +
geom_histogram(aes(y = ..density..), fill = "steelblue", alpha = 0.5, color = 'black') +
geom_vline(xintercept = mean(df_plot$stats), color = 'orange', size = 1) +
geom_vline(xintercept = prop_recid, color = 'darkgreen', size = 1, linetype = 2) +
ggtitle("Resample of proportion", str_glue("Tamaño de muestra {M}")) +
annotate("text", x=-Inf, y=-Inf, hjust=0, vjust=0, label=str_glue("std: {round(std_bootstrap * 100, 4)}%")) +
xlab("Proportion") + ylab("Density") +
scale_x_continuous(labels = scales::percent) +
theme_bw()
muestrear_pob <- function(n){
u <- runif(n) # número aleatorio
map_dbl(u, ~ ifelse(.x < 1/2, rgamma(1, 5, 0.1), rnorm(1, 100, 5)))
}
muestra_aprox <- muestrear_pob(10000)
qplot(muestra_aprox, binwidth= 2)
M <- 50
medias <- map_dbl(1:2000,  ~ mean(sample(muestra_aprox, size=M, replace=TRUE)))
# plot
qplot(medias, binwidth= 2) +
geom_vline(xintercept = mean(medias), size = 1, color = "darkred")
M <- 50
medias <- map_dbl(1:2000,  ~ mean(
ifelse(.x %% 2 == 0,
mean(sample(muestra_aprox[muestra_aprox < mean(sample(muestra_aprox, size=M, replace=TRUE))], size=M, replace=TRUE)),
mean(sample(muestra_aprox[muestra_aprox >= mean(sample(muestra_aprox, size=M, replace=TRUE))], size=M, replace=TRUE))
)
)
)
# plot
qplot(medias, binwidth= 2) +
geom_vline(xintercept = mean(medias), size = 1, color = "darkred") +
ggtitle("Control of population")
df_enlace <- read_csv("../../data/enlace_15.csv")
df_enlace
plt_hist_grades <- function(df, M=-1){
# size of the sample
msize <- ifelse(M > 0, M, nrow(df))
# subset df
df <- df |> slice_sample(n = msize, replace = FALSE)
# get mean and std
mu <- mean(df$esp_3, na.rm = TRUE)
sigma <- sd(df$esp_3, na.rm = TRUE)
# plot
print(
df |>
ggplot(aes(esp_3)) +
geom_rect(aes(xmin = mu - sigma, xmax = mu + sigma, ymin = 0, ymax = Inf), fill = "pink", alpha = 0.01) +
geom_vline(xintercept = mean(mu), size = 1, color = "darkred") +
geom_histogram(alpha = 0.8) +
ggtitle("Grades", str_glue("Sample size: {msize}")) +
annotate("text", x=-Inf, y=-Inf, hjust=0, vjust=0, label=str_glue("mean: {round(mu, 2)} \nstd: {round(sigma, 2)}")) +
xlab("Grade") + ylab("Density") +
theme_bw()
)
}
plt_hist_grades(df_enlace)
for(num in c(10, 100, 1000))
plt_hist_grades(df_enlace, num)
f_bootstrap_mean <- function(df, M, B){
# B: number of simulations
# M: size of the sample
#g: statistical function
# generate B samples of indexes
b_samples <- lapply(1:B, function(x) sample(df$esp_3, size = M, replace = TRUE))
# subset apply
gsubset_apply <- function(x){
return(mean(x))
}
# # get B samples of the stat
stats <- sapply(b_samples, gsubset_apply)
return(stats)
}
# simulation of the distribution
for(num in c(10, 100, 1000)){
set.seed(8)
boot_mean_grades <- f_bootstrap_mean(df_enlace, M=num, B=5000)
# mean and std
mean_grades <- mean(boot_mean_grades)
sd_grades <- sd(boot_mean_grades)
# plot
print(qplot(boot_mean_grades, bins = 50) +
geom_rect(aes(xmin = mean_grades - sd_grades, xmax = mean_grades + sd_grades, ymin = 0, ymax = Inf), fill = "pink", alpha = 0.01) +
geom_vline(xintercept = mean_grades, size = 1, color = "darkred") +
ggtitle("Distribution of the mean") +
annotate("text", x=-Inf, y=-Inf, hjust=0, vjust=0, label=str_glue("mean: {round(mean_grades)} \nstd: {round(sd_grades, 2)}")) +
xlab("Grade") + ylab("Density") +
theme_bw())
# std
cat("\n")
cat(str_glue("\n bootstrapped sd {round(sd_grades, 4)}"))
}
population_sd <- sqrt(sum((mean(df_enlace$esp_3) - df_enlace$esp_3)^2) / nrow(df_enlace))
cat("\n")
cat(str_glue("population sd {round(population_sd, 4)}"))
scale_x_continuous() +
theme_bw()
# plot
qplot(medias, binwidth= 2) +
geom_vline(xintercept = mean(medias), size = 1, color = "darkred") +
xlab("Mean") + ylab("Density") +
ggplot("Distribution of the mean") +
scale_x_continuous() +
theme_bw()
M <- 50
medias <- map_dbl(1:2000,  ~ mean(sample(muestra_aprox, size=M, replace=TRUE)))
# plot
qplot(medias, binwidth= 2) +
geom_vline(xintercept = mean(medias), size = 1, color = "darkred") +
xlab("Mean") + ylab("Density") +
ggplot("Distribution of the mean") +
scale_x_continuous() +
theme_bw()
# plot
qplot(medias, binwidth= 2) +
geom_vline(xintercept = mean(medias), size = 1, color = "darkred") +
xlab("Mean") + ylab("Density") +
ggplot("Distribution of the mean") +
theme_bw()
qplot(medias, binwidth= 2) +
geom_vline(xintercept = mean(medias), size = 1, color = "darkred")
qplot(medias, binwidth= 2) +
geom_vline(xintercept = mean(medias), size = 1, color = "darkred") +
xlab("Mean") + ylab("Density")
qplot(medias, binwidth= 2) +
geom_vline(xintercept = mean(medias), size = 1, color = "darkred") +
xlab("Mean") + ylab("Density") +
ggplot("Distribution of the mean")
# plot
qplot(medias, binwidth= 2) +
geom_vline(xintercept = mean(medias), size = 1, color = "darkred") +
xlab("Mean") + ylab("Density") +
ggtitle("Distribution of the mean") +
theme_bw()
# plot
qplot(medias, bins=20) +
geom_vline(xintercept = mean(medias), size = 1, color = "darkred") +
xlab("Mean") + ylab("Density") +
ggtitle("Distribution of the mean") +
theme_bw()
# plot
qplot(medias, bins=20, color='black', fill='steelblue') +
geom_vline(xintercept = mean(medias), size = 1, color = "darkred") +
xlab("Mean") + ylab("Density") +
ggtitle("Distribution of the mean") +
theme_bw()
# plot
qplot(medias, bins=20) +
geom_vline(xintercept = mean(medias), size = 1, color = "darkred") +
xlab("Mean") + ylab("Density") +
ggtitle("Distribution of the mean") +
theme_bw()
for(num in c(10, 100, 1000))
plt_hist_grades(df_enlace, num)
plt_hist_grades <- function(df, M=-1){
# size of the sample
msize <- ifelse(M > 0, M, nrow(df))
# subset df
df <- df |> slice_sample(n = msize, replace = FALSE)
# get mean and std
mu <- mean(df$esp_3, na.rm = TRUE)
sigma <- sd(df$esp_3, na.rm = TRUE)
# plot
print(
df |>
ggplot(aes(esp_3)) +
geom_rect(aes(xmin = mu - sigma, xmax = mu + sigma, ymin = 0, ymax = Inf), fill = "pink", alpha = 0.01) +
geom_vline(xintercept = mean(mu), size = 1, color = "darkred") +
geom_histogram(alpha = 0.8) +
ggtitle("Grades", str_glue("Sample size: {msize}")) +
annotate("text", x=-Inf, y=-Inf, hjust=0, vjust=0, label=str_glue("mean: {round(mu, 2)} \nstd: {round(sigma, 2)}")) +
xlab("Grade") + ylab("Density") +
scale_x_continuous(limits = c(300, 900))
theme_bw()
)
}
plt_hist_grades(df_enlace)
plt_hist_grades <- function(df, M=-1){
# size of the sample
msize <- ifelse(M > 0, M, nrow(df))
# subset df
df <- df |> slice_sample(n = msize, replace = FALSE)
# get mean and std
mu <- mean(df$esp_3, na.rm = TRUE)
sigma <- sd(df$esp_3, na.rm = TRUE)
# plot
print(
df |>
ggplot(aes(esp_3)) +
geom_rect(aes(xmin = mu - sigma, xmax = mu + sigma, ymin = 0, ymax = Inf), fill = "pink", alpha = 0.01) +
geom_vline(xintercept = mean(mu), size = 1, color = "darkred") +
geom_histogram(alpha = 0.8) +
ggtitle("Grades", str_glue("Sample size: {msize}")) +
annotate("text", x=-Inf, y=-Inf, hjust=0, vjust=0, label=str_glue("mean: {round(mu, 2)} \nstd: {round(sigma, 2)}")) +
xlab("Grade") + ylab("Density") +
scale_x_continuous(limits = c(300, 900)) +
theme_bw()
)
}
plt_hist_grades(df_enlace)
for(num in c(10, 100, 1000))
plt_hist_grades(df_enlace, num)
plt_hist_grades <- function(df, M=-1){
# size of the sample
msize <- ifelse(M > 0, M, nrow(df))
# subset df
df <- df |> slice_sample(n = msize, replace = FALSE)
# get mean and std
mu <- mean(df$esp_3, na.rm = TRUE)
sigma <- sd(df$esp_3, na.rm = TRUE)
# plot
print(
df |>
ggplot(aes(esp_3)) +
geom_rect(aes(xmin = mu - sigma, xmax = mu + sigma, ymin = 0, ymax = Inf), fill = "pink", alpha = 0.01) +
geom_vline(xintercept = mean(mu), size = 1, color = "darkred") +
geom_histogram(alpha = 0.8, bins = 30) +
ggtitle("Grades", str_glue("Sample size: {msize}")) +
annotate("text", x=-Inf, y=-Inf, hjust=0, vjust=0, label=str_glue("mean: {round(mu, 2)} \nstd: {round(sigma, 2)}")) +
xlab("Grade") + ylab("Density") +
scale_x_continuous(limits = c(300, 900)) +
theme_bw()
)
}
plt_hist_grades(df_enlace)
for(num in c(10, 100, 1000))
plt_hist_grades(df_enlace, num)
f_bootstrap_mean <- function(df, M, B){
# B: number of simulations
# M: size of the sample
#g: statistical function
# generate B samples of indexes
b_samples <- lapply(1:B, function(x) sample(df$esp_3, size = M, replace = TRUE))
# subset apply
gsubset_apply <- function(x){
return(mean(x))
}
# # get B samples of the stat
stats <- sapply(b_samples, gsubset_apply)
return(stats)
}
# simulation of the distribution
for(num in c(10, 100, 1000)){
set.seed(8)
boot_mean_grades <- f_bootstrap_mean(df_enlace, M=num, B=5000)
# mean and std
mean_grades <- mean(boot_mean_grades)
sd_grades <- sd(boot_mean_grades)
# plot
print(qplot(boot_mean_grades, bins = 50) +
geom_rect(aes(xmin = mean_grades - sd_grades, xmax = mean_grades + sd_grades, ymin = 0, ymax = Inf), fill = "pink", alpha = 0.01) +
geom_vline(xintercept = mean_grades, size = 1, color = "darkred") +
ggtitle("Distribution of the mean") +
annotate("text", x=-Inf, y=-Inf, hjust=0, vjust=0, label=str_glue("mean: {round(mean_grades)} \nstd: {round(sd_grades, 2)}")) +
xlab("Grade") + ylab("Density") +
theme_bw())
# std
cat("\n")
cat(str_glue("\n bootstrapped sd {round(sd_grades, 4)}"))
}
population_sd <- sqrt(sum((mean(df_enlace$esp_3) - df_enlace$esp_3)^2) / nrow(df_enlace))
cat("\n")
cat(str_glue("population sd {round(population_sd, 4)}"))
f_bootstrap_mean <- function(df, M, B){
# B: number of simulations
# M: size of the sample
#g: statistical function
# generate B samples of indexes
b_samples <- lapply(1:B, function(x) sample(df$esp_3, size = M, replace = TRUE))
# subset apply
gsubset_apply <- function(x){
return(mean(x))
}
# # get B samples of the stat
stats <- sapply(b_samples, gsubset_apply)
return(stats)
}
# simulation of the distribution
for(num in c(10, 100, 1000)){
set.seed(8)
boot_mean_grades <- f_bootstrap_mean(df_enlace, M=num, B=5000)
# mean and std
mean_grades <- mean(boot_mean_grades)
sd_grades <- sd(boot_mean_grades)
# plot
print(qplot(boot_mean_grades, bins = 50) +
geom_rect(aes(xmin = mean_grades - sd_grades, xmax = mean_grades + sd_grades, ymin = 0, ymax = Inf), fill = "pink", alpha = 0.01) +
geom_vline(xintercept = mean_grades, size = 1, color = "darkred") +
ggtitle("Distribution of the mean") +
annotate("text", x=-Inf, y=-Inf, hjust=0, vjust=0, label=str_glue("mean: {round(mean_grades)} \nstd: {round(sd_grades, 2)}")) +
xlab("Grade") + ylab("Density") +
scale_x_continuous(limits = c(480, 640)) +
theme_bw())
# std
cat("\n")
cat(str_glue("\n bootstrapped sd {round(sd_grades, 4)}"))
}
population_sd <- sqrt(sum((mean(df_enlace$esp_3) - df_enlace$esp_3)^2) / nrow(df_enlace))
cat("\n")
cat(str_glue("population sd {round(population_sd, 4)}"))
cat(str_glue("decrease from 10 to 100: {1-6.02/18.66}"))
cat(str_glue("decrease from 100 to 1000: {1-1.87/6.02}"))
cat(str_glue("factor of $1/\sqrt(10)$: {1/sqrt(10)}"))
cat(str_glue("factor of $1/\sqrt(100)$: {1/sqrt(100)}"))
cat(str_glue("factor of $1/\sqrt(1000)$: {1/sqrt(100)}"))
cat(str_glue("decrease from 10 to 100: {1-6.02/18.66}"))
cat(str_glue("decrease from 100 to 1000: {1-1.87/6.02}"))
cat(str_glue("factor of $1/sqrt(10)$: {1/sqrt(10)}"))
cat(str_glue("factor of $1/sqrt(100)$: {1/sqrt(100)}"))
cat(str_glue("factor of $1/sqrt(1000)$: {1/sqrt(100)}"))
cat(str_glue("decrease from 10 to 100: {1-6.02/18.66}"))
cat(str_glue("\n decrease from 100 to 1000: {1-1.87/6.02}"))
cat(str_glue("\n factor of $1/sqrt(10)$: {1/sqrt(10)}"))
cat(str_glue("\n factor of $1/sqrt(100)$: {1/sqrt(100)}"))
cat(str_glue("\n factor of $1/sqrt(1000)$: {1/sqrt(100)}"))
cat(str_glue("decrease from 10 to 100: {1-6.02/18.66} \n"))
cat(str_glue("\n decrease from 100 to 1000: {1-1.87/6.02} \n"))
cat(str_glue("\n factor of $1/sqrt(10)$: {1/sqrt(10)} \n"))
cat(str_glue("\n factor of $1/sqrt(100)$: {1/sqrt(100)} \n "))
cat(str_glue("\n factor of $1/sqrt(1000)$: {1/sqrt(100)} \n"))
cat(str_glue("decrease from 10 to 100: {1-6.02/18.66} \n"))
cat("\n")
cat(str_glue("\n decrease from 100 to 1000: {1-1.87/6.02} \n"))
cat(str_glue("\n factor of $1/sqrt(10)$: {1/sqrt(10)} \n"))
cat(str_glue("\n factor of $1/sqrt(100)$: {1/sqrt(100)} \n "))
cat(str_glue("\n factor of $1/sqrt(1000)$: {1/sqrt(100)} \n"))
cat(str_glue("decrease from 10 to 100: {1-6.02/18.66} \n"))
cat("\n")
cat(str_glue("\n decrease from 100 to 1000: {1-1.87/6.02} \n"))
cat("\n")
cat(str_glue("\n factor of $1/sqrt(10)$: {1/sqrt(10)} \n"))
cat("\n")
cat(str_glue("\n factor of $1/sqrt(100)$: {1/sqrt(100)} \n "))
cat("\n")
cat(str_glue("\n factor of $1/sqrt(1000)$: {1/sqrt(100)} \n"))
cat(str_glue("decrease from 10 to 100: {1-6.02/18.66} \n"))
cat("\n")
cat(str_glue("\n decrease from 100 to 1000: {1-1.87/6.02} \n"))
cat("\n")
cat(str_glue("\n factor of $1/sqrt(10)$: {1/sqrt(10)} \n"))
cat("\n")
cat(str_glue("\n factor of $1/sqrt(100)$: {1/sqrt(100)} \n "))
cat("\n")
cat(str_glue("\n factor of $1/sqrt(1000)$: {1/sqrt(1000)} \n"))
std_pop <- 59.26
cat("population std: {59.26}")
cat(str_glue("theoretical decrease to 10: {std_pop/sqrt(10)}\n"))
cat("\n")
cat(str_glue("theoretical decrease to 100: {std_pop/sqrt(100)}\n"))
cat("\n")
cat(str_glue("theoretical decrease to 1000: {std_pop/sqrt(1000)}\n"))
cat("\n")
std_pop <- 59.26
cat("population std: {59.26}")
cat("\n")
cat(str_glue("theoretical decrease to 10: {std_pop/sqrt(10)}\n"))
cat("\n")
cat(str_glue("theoretical decrease to 100: {std_pop/sqrt(100)}\n"))
cat("\n")
cat(str_glue("theoretical decrease to 1000: {std_pop/sqrt(1000)}\n"))
cat("\n")
std_pop <- 59.26
cat("population std: {std_pop}")
cat("\n")
cat(str_glue("theoretical decrease to 10: {std_pop/sqrt(10)}\n"))
cat("\n")
cat(str_glue("theoretical decrease to 100: {std_pop/sqrt(100)}\n"))
cat("\n")
cat(str_glue("theoretical decrease to 1000: {std_pop/sqrt(1000)}\n"))
cat("\n")
std_pop <- 59.26
cat(str_glue("population std: {std_pop}"))
cat("\n")
cat(str_glue("theoretical decrease to 10: {std_pop/sqrt(10)}\n"))
cat("\n")
cat(str_glue("theoretical decrease to 100: {std_pop/sqrt(100)}\n"))
cat("\n")
cat(str_glue("theoretical decrease to 1000: {std_pop/sqrt(1000)}\n"))
cat("\n")
std_pop <- 59.26
cat(str_glue("population std: {std_pop}"))
cat("\n")
cat(str_glue("theoretical decrease to 10: {std_pop/sqrt(10)}\n"))
cat("\n")
cat(str_glue("theoretical decrease to 100: {std_pop/sqrt(100)}\n"))
cat("\n")
cat(str_glue("theoretical decrease to 1000: {std_pop/sqrt(1000)}\n"))
cat("\n")
knitr::opts_chunk$set(echo = FALSE, error = TRUE, include = TRUE)
