library(tidyverse)
# create log likelihood
bin_loglike <- function(n, n_err){
n_corr <- n - n_err
log_verosim <- function(p){
n_err * log(p) + n_corr * log(1-p)
}
}
# create some sim
tibble(x = seq(0, 1, 0.001)) |>
mutate(loglike = map_dbl(x, bin_loglike)) |>
ggplot(aes(x, loglike)) +
geom_line()
# create some sim
tibble(x = seq(0, 1, 0.001)) |>
mutate(loglike = map_dbl(x, bin_loglike(n = 100, n_err = 20))) |>
ggplot(aes(x, loglike)) +
geom_line()
# create some sim
tibble(x = seq(0, 1, 0.001)) |>
mutate(loglike = map_dbl(x, bin_loglike(n = 100, n_err = 20))) |>
ggplot(aes(x, loglike)) +
geom_line()
# create some sim
tibble(x = seq(0, 1, 0.001)) |>
mutate(loglike = map_dbl(x, bin_loglike(n = 100, n_err = 25))) |>
ggplot(aes(x, loglike)) +
geom_line()
# loglike
tibble(x = seq(0, 1, 0.001)) |>
mutate(loglike = map_dbl(x, bin_loglike(n = 500, n_err = 121))) |>
ggplot(aes(x, loglike)) +
geom_line() +
geom_vline(xintercept = 121/500, color = "red") +
ggtitle("Log Verosimilitud", "N = 500; Errores = 121")
?optimize
optimize(
f = function(x) loglike(n = 500, n_err = 121),
interval = c(0, 1), # support of p
maximum = TRUE # maximization
)
optimize(
f = function(x) loglike(x, n = 500, n_err = 121),
interval = c(0, 1), # support of p
maximum = TRUE # maximization
)
optimize(
f = function(x) loglike(x, n = 500, n_err = 121),
interval = c(0, 1), # support of p
maximum = TRUE # maximization
)
loglike
optimize(
f = function(x) bin_loglike(x, n = 500, n_err = 121),
interval = c(0, 1), # support of p
maximum = TRUE # maximization
)
optimize(
f = function(x) bin_loglike(n = 500, n_err = 121),
interval = c(0, 1), # support of p
maximum = TRUE # maximization
)
optimize(
f = bin_loglike(n = 500, n_err = 121),
interval = c(0, 1), # support of p
maximum = TRUE # maximization
)
# print
cat(str_glue("Maxima verosimilitud, p: {p_mlike$p_mlike}"))
# optimize
p_mlike <- optimize(
f = bin_loglike(n = 500, n_err = 121),
interval = c(0, 1), # support of p
maximum = TRUE # maximization
)
# print
cat(str_glue("Maxima verosimilitud, p: {p_mlike$p_mlike}"))
# print
cat(str_glue("Maxima verosimilitud, p: {p_mlike$p_mlike}"))
# print
print(str_glue("Maxima verosimilitud, p: {p_mlike$p_mlike}"))
# print
str_glue("Maxima verosimilitud, p: {p_mlike$p_mlike}")
# print
str_glue("Maxima verosimilitud")
# print
str_glue("Maxima verosimilitud, p: {p_mlike$p_mlike}")
# print
str_glue("Maxima verosimilitud, p: {p_mlike}")
# print
str_glue("Maxima verosimilitud, p: {p_mlike[[1]]}")
# print
print(str_glue("Maxima verosimilitud, p: {p_mlike[[1]]}"))
# optimize
p_mlike <- optimize(
f = bin_loglike(n = 500, n_err = 121),
interval = c(0, 1), # support of p
maximum = TRUE # maximization
)
# print
print(str_glue("Maxima verosimilitud, p: {p_mlike[[1]]}"))
# print
print(str_glue("Maxima verosimilitud, p: {round(p_mlike[[1]]}, 4)"))
# optimize
p_mlike <- optimize(
f = bin_loglike(n = 500, n_err = 121),
interval = c(0, 1), # support of p
maximum = TRUE # maximization
)
# print
print(str_glue("Maxima verosimilitud, p: {round(p_mlike[[1]]}, 4)"))
# print
print(str_glue("Maxima verosimilitud, p: {round(p_mlike[[1]], 4)}"))
# optimize
p_mlike <- optimize(
f = bin_loglike(n = 500, n_err = 121),
interval = c(0, 1), # support of p
maximum = TRUE # maximization
)
# print
print(str_glue("Maxima verosimilitud, p: {round(p_mlike[[1]], 4)}"))
# create likelihood
bin_like <- function(n, n_err){
n_corr <- n - n_err
log_verosim <- function(p){
exp(n_err * log(p) + n_corr * log(1-p))
}
}
# create some sim
tibble(x = seq(0, 1, 0.001)) |>
mutate(loglike = map_dbl(x, bin_like(n = 500, n_err = 121))) |>
ggplot(aes(x, loglike)) +
geom_line() +
geom_vline(xintercept = p_mlike$maximum color = "red") +
# create likelihood
bin_like <- function(n, n_err){
n_corr <- n - n_err
log_verosim <- function(p){
exp(n_err * log(p) + n_corr * log(1-p))
}
}
# create some sim
tibble(x = seq(0, 1, 0.001)) |>
mutate(loglike = map_dbl(x, bin_like(n = 500, n_err = 121))) |>
ggplot(aes(x, loglike)) +
geom_line() +
geom_vline(xintercept = p_mlike$maximum, color = "red") +
ggtitle("Log Verosimilitud", "N = 500; Errores = 121")
# create likelihood
bin_like <- function(n, n_err){
n_corr <- n - n_err
log_verosim <- function(p){
exp(n_err * log(p) + n_corr * log(1-p))
}
}
# create some sim
tibble(x = seq(0, 1, 0.001)) |>
mutate(loglike = map_dbl(x, bin_like(n = 500, n_err = 121))) |>
ggplot(aes(x, loglike)) +
geom_line() +
geom_vline(xintercept = p_mlike$maximum, color = "red") +
ggtitle("Verosimilitud", "N = 500; Errores = 121")
# optimize
p_mlike <- optimize(
f = bin_loglike(n = 500, n_err = 317),
interval = c(0, 1), # support of p
maximum = TRUE # maximization
)
# print
print(str_glue("Maxima verosimilitud, p: {round(p_mlike[[1]], 4)}"))
# create some sim
tibble(x = seq(0, 1, 0.001)) |>
mutate(loglike = map_dbl(x, bin_like(n = 500, n_err = 317))) |>
ggplot(aes(x, loglike)) +
geom_line() +
geom_vline(xintercept = p_mlike$maximum, color = "red") +
ggtitle("Verosimilitud", "N = 500; Errores = 121")
# optimize
p_mlike <- optimize(
f = bin_loglike(n = 500, n_err = 317),
interval = c(0, 1), # support of p
maximum = TRUE # maximization
)
# print
print(str_glue("Maxima verosimilitud, p: {round(p_mlike[[1]], 4)}"))
# create some sim
tibble(x = seq(0, 1, 0.001)) |>
mutate(loglike = map_dbl(x, bin_like(n = 500, n_err = 317))) |>
ggplot(aes(x, loglike)) +
geom_line() +
geom_vline(xintercept = p_mlike$maximum, color = "red") +
ggtitle("Verosimilitud", "N = 500; Errores = 317")
set.seed(1234)
m <- runif(1, 5, 10) # media entre 5 y 10
desv_est <- runif(1, 0, 2) # desviación estándar entre 0 y 2
#simulamos una muestra con la que trabajaremos.
x <- rnorm(150, mean = m, sd = desv_est)
# revisar datos
qplot(x, geom = "histogram", fill = "steelblue", color = "black")
# revisar datos
qplot(x, geom = "histogram")
# revisar datos
qplot(x, geom = "histogram") + ggtitle("Histograma de la muestra X")
xmean_plugin <- mean(x)
xsigma2 <- var(x)
cat(str_glue("media plug in: {xmean_plugin}"))
xmean_plugin <- mean(x)
xsigma2_plugin <- var(x)
cat(str_glue("media plug in: {xmean_plugin}"))
cat(str_glue("sigma2 plug in: {xsigma2_plugin}"))
xmean_plugin <- mean(x)
xsigma2_plugin <- var(x)
cat(str_glue("media plug in: {xmean_plugin}\n"))
cat(str_glue("sigma2 plug in: {xsigma2_plugin}"))
xmean_plugin <- mean(x)
xsigma2_plugin <- var(x)
cat(str_glue("media plug in: {xmean_plugin}\n"))
cat(str_glue("\nsigma2 plug in: {xsigma2_plugin}"))
xmean_plugin <- mean(x)
xsigma2_plugin <- var(x)
cat(str_glue("media plug in: {xmean_plugin}\n"))
cat(str_glue("\nsigma2 plug in: {xsigma2_plugin}"))
xmean_plugin <- mean(x)
xsigma2_plugin <- var(x)
cat(str_glue("media plug in: {xmean_plugin}\n"))
cat(str_glue("\n sigma2 plug in: {xsigma2_plugin}"))
xmean_plugin <- mean(x)
xsigma2_plugin <- var(x)
cat(str_glue("media plug in: {xmean_plugin}"))
cat()
cat(str_glue("sigma2 plug in: {xsigma2_plugin}"))
xmean_plugin <- mean(x)
xsigma2_plugin <- var(x)
cat(str_glue("media plug in: {xmean_plugin}"))
cat("\n")
cat(str_glue("sigma2 plug in: {xsigma2_plugin}"))
xmean_plugin <- mean(x)
xsigma_plugin <- std(x)
xmean_plugin <- mean(x)
xsigma_plugin <- sd(x)
cat(str_glue("media plug in: {xmean_plugin}"))
cat("\n")
cat(str_glue("sigma plug in: {xsigma_plugin}"))
# create log likelihood
normal_loglike <- function(x){
n <- length(x)
log_verosim <- function(mu, sigma){
- n * log(sigma) - sum((x - mu)^(2) / (2 * sigma^(2)))
}
}
# estimate mu & sigma
normal_params_std <- optimize(
f = bin_loglike(n = 500, n_err = 317),
interval = c(0, 1), # support of p
maximum = TRUE # maximization
)
# create log likelihood
normal_loglike <- function(x){
n <- length(x)
log_verosim <- function(params){
- n * log(params[[2]]) - sum((x - params[[1]])^(2) / (2 * params[[2]]^(2))) # 1: mu, 2: sigma
}
}
# estimate mu & sigma
normal_params_std <- optim(
par = c(0, 1), # standard normal
fn = normal_loglike(x),
method = "BFGS"
)
# create log likelihood
normal_loglike <- function(x){
n <- length(x)
log_verosim <- function(params){
- n * log(params[[2]]) - sum((x - params[[1]])^(2) / (2 * params[[2]]^(2))) # 1: mu, 2: sigma
}
}
# estimate mu & sigma
normal_params_std <- optim(
par = c(0, 1), # standard normal
fn = normal_loglike(x)
)
# create log likelihood
normal_loglike <- function(x){
n <- length(x)
log_verosim <- function(params){
- n * log(params[2]) - sum((x - params[1])^(2) / (2 * params[2]^(2))) # 1: mu, 2: sigma
}
}
# estimate mu & sigma
normal_params_std <- optim(
par = c(0, 1), # standard normal
fn = normal_loglike(x)
)
# create log likelihood
normal_loglike <- function(x){
n <- length(x)
log_verosim <- function(params){
- n * log(params[2]) - sum((x - params[1])^(2) / (2 * params[2]^(2))) # 1: mu, 2: sigma
}
}
loglike_normx <- normal_loglike(x)
# estimate mu & sigma
normal_params_std <- optim(
par = c(0, 1), # standard normal
fn = loglike_normx
)
# create log likelihood
normal_loglike <- function(x){
n <- length(x)
log_verosim <- function(params){
- n * log(params[2]) - sum((x - params[1])^(2) / (2 * params[2]^(2))) # 1: mu, 2: sigma
}
}
loglike_normx <- normal_loglike(x)
# estimate mu & sigma
normal_params_std <- optim(
par = c(0, 1), # standard normal
fn = loglike_normx,
control = list(fnscale = -1, maxit = 1000),
method = "Nelder-Mead"
)
normal_params_std
# create log likelihood
normal_loglike <- function(x){
n <- length(x)
log_verosim <- function(params){
- n * log(params[2]) - sum((x - params[1])^(2) / (2 * params[2]^(2))) # 1: mu, 2: sigma
}
}
loglike_normx <- normal_loglike(x)
# estimate mu & sigma
normal_params_std <- optim(
par = c(0, 1), # standard normal
fn = loglike_normx,
control = list(fnscale = -1, maxit = 1000),
method = "BFGS"
)
normal_params_std
# create log likelihood
normal_loglike <- function(x){
n <- length(x)
log_verosim <- function(params){
- n * log(params[2]) - sum((x - params[1])^(2) / (2 * params[2]^(2))) # 1: mu, 2: sigma
}
}
loglike_normx <- normal_loglike(x)
# estimate mu & sigma
normal_params_std <- optim(
par = c(0, 1), # standard normal
fn = loglike_normx,
control = list(fnscale = -1, maxit = 1000),
method = "Nelder-Mead"
)
cat(str_glue("media mv in: {normal_params_std$par[1]}"))
cat("\n")
cat(str_glue("sigma mv in: {normal_params_std$par[2]}"))
# create log likelihood
normal_loglike <- function(x){
n <- length(x)
log_verosim <- function(params){
- n * log(params[2]) - sum((x - params[1])^(2) / (2 * params[2]^(2))) # 1: mu, 2: sigma
}
}
loglike_normx <- normal_loglike(x)
# estimate mu & sigma
normal_params_std <- optim(
par = c(0, 1), # standard normal
fn = loglike_normx,
control = list(fnscale = -1, maxit = 1000), # fn = -1 --> maximize
method = "Nelder-Mead"
)
cat(str_glue("media mv in: {normal_params_std$par[1]}"))
cat("\n")
cat(str_glue("sigma mv in: {normal_params_std$par[2]}"))
cat(str_glue("media real in: {m}"))
cat("\n")
cat(str_glue("sigma real in: {desv_est}"))
