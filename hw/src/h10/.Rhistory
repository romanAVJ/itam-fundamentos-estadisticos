# create log likelihood
bin_loglike <- function(n, n_err){
n_corr <- n - n_err
log_verosim <- function(p){
n_err * log(p) + n_corr * log(1-p)
}
}
# create some sim
tibble(x = seq(0, 1, 0.001)) |>
mutate(loglike = map_dbl(x, bin_loglike(n = 100, n_err = 25))) |>
ggplot(aes(x, loglike)) +
geom_line()
library(tidyverse)
# create log likelihood
bin_loglike <- function(n, n_err){
n_corr <- n - n_err
log_verosim <- function(p){
n_err * log(p) + n_corr * log(1-p)
}
}
# create some sim
tibble(x = seq(0, 1, 0.001)) |>
mutate(loglike = map_dbl(x, bin_loglike(n = 100, n_err = 25))) |>
ggplot(aes(x, loglike)) +
geom_line()
# create some sim
tibble(x = seq(0, 1, 0.001)) |>
mutate(loglike = map_dbl(x, bin_loglike(n = 100, n_err = 25))) |>
ggplot(aes(x, loglike)) +
geom_line() +
ggtitle("Log Verosimilitud del Modelo")
# optimize
p_mlike <- optimize(
f = bin_loglike(n = 500, n_err = 121),
interval = c(0, 1), # support of p
maximum = TRUE # maximization
)
# print
print(str_glue("Maxima verosimilitud, p: {round(p_mlike[[1]], 4)}"))
# simular modelo
sim_modelo <- function(n, p, B=250){
rbinom(B, n, p)
}
# una simulación
xsim_model  <- sim_modelo(p = 0.5, n = 500)
cat("La simulación de estos datos es:", xsim_model, "\n")
# simular modelo
sim_modelo <- function(n, p, B=250){
rbinom(B, n, p)
}
# una simulación
xsim_model  <- sim_modelo(p = 0.5, n = 500, B=1)
cat("La simulación de estos datos es:", xsim_model, "\n")
p_mlike
B  <- 3000
xsim_3000  <- sim_modelo(p = p_mlike[[1]], n = 500, B=B)
# grafica histograma
ggplot(tibble(xsim_3000), aes(x = xsim_3000)) +
geom_histogram(bins = 20) +
labs(x = "Simulaciones", y = "Frecuencia") +
ggtitle("Histograma de simulaciones", "Bajo el estimador MV") +
theme_bw()
B  <- 3000
xsim_3000  <- sim_modelo(p = p_mlike[[1]], n = 500, B=B)
# grafica histograma
ggplot(tibble(xsim_3000), aes(x = xsim_3000)) +
geom_histogram(bins = 20) +
labs(x = "Simulaciones", y = "Frecuencia") +
ggtitle("Histograma de simulaciones del Proceso Generador de Datos", "Bajo el estimador MV") +
theme_bw()
rep_boot  <- function(logv, est_mle, n, B=250){
# create parametric bootstrap
xsim  <- sim_modelo(n = n, p = est_mle, B = B)
# find max verosimilitud for each simulation
mle_sim  <- c()
for (i in 1:B){
log_v_sim  <- logv(n = n, n_err = xsim[i])
optim_sim  <- optimize(log_v_sim, interval = c(0, 1), maximum = TRUE)
mle_sim[i]  <- optim_sim$maximum
}
return(mle_sim)
}
reps_boot  <- rep_boot(logv = crear_log_verosim, est_mle = optim$maximum, n = 500, B = 3000)
rep_boot  <- function(logv, est_mle, n, B=250){
# create parametric bootstrap
xsim  <- sim_modelo(n = n, p = est_mle, B = B)
# find max verosimilitud for each simulation
mle_sim  <- c()
for (i in 1:B){
log_v_sim  <- logv(n = n, n_err = xsim[i])
optim_sim  <- optimize(log_v_sim, interval = c(0, 1), maximum = TRUE)
mle_sim[i]  <- optim_sim$maximum
}
return(mle_sim)
}
reps_boot  <- rep_boot(logv = bin_loglike, est_mle = p_mlike[[1]], n = 500, B = 3000)
rep_boot  <- function(logv, est_mle, n, B=250){
# create parametric bootstrap
xsim  <- sim_modelo(n = n, p = est_mle, B = B)
# find max verosimilitud for each simulation
mle_sim  <- c()
for (i in 1:B){
log_v_sim  <- logv(n = n, n_err = xsim[i])
optim_sim  <- optimize(log_v_sim, interval = c(0, 1), maximum = TRUE)
mle_sim[i]  <- optim_sim$maximum
}
return(mle_sim)
}
# calcular mv para cada sim
reps_boot  <- rep_boot(logv = bin_loglike, est_mle = p_mlike[[1]], n = 500, B = 3000)
# grafica histograma
ggplot(tibble(reps_boot), aes(x = reps_boot)) +
geom_histogram(bins = 20) +
geom_vline(xintercept = optim$maximum, color = "red", size = 1.5) +
labs(x = "Estimador de max verosimilitud", y = "Frecuencia") +
ggtitle("Histograma de estimadores de max verosimilitud") +
theme_bw()
reps_boot
# grafica histograma
ggplot(tibble(reps_boot), aes(x = reps_boot)) +
geom_histogram(bins = 20) +
geom_vline(xintercept = p_mlike$maximum, color = "red", size = 1.5) +
labs(x = "Estimador de max verosimilitud", y = "Frecuencia") +
ggtitle("Histograma de estimadores de max verosimilitud") +
theme_bw()
# descripcion de las simulaciones
cat("descripcion de las simulaciones:")
summary(reps_boot)
# descripcion de las simulaciones
cat("descripcion de las simulaciones: \n")
summary(reps_boot)
cat("error estándar del estimador MV muestral \n")
cat(sd(reps_boot))
library(tidyverse)
set.seed(8)
library(tidyverse)
set.seed(8)
# create log likelihood
bin_loglike <- function(n, n_err){
n_corr <- n - n_err
log_verosim <- function(p){
n_err * log(p) + n_corr * log(1-p)
}
}
# create some sim
tibble(x = seq(0, 1, 0.001)) |>
mutate(loglike = map_dbl(x, bin_loglike(n = 100, n_err = 25))) |>
ggplot(aes(x, loglike)) +
geom_line() +
ggtitle("Log Verosimilitud del Modelo")
# optimize
p_mlike <- optimize(
f = bin_loglike(n = 500, n_err = 121),
interval = c(0, 1), # support of p
maximum = TRUE # maximization
)
# print
print(str_glue("Maxima verosimilitud, p: {round(p_mlike[[1]], 4)}"))
# simular modelo
sim_modelo <- function(n, p, B=250){
rbinom(B, n, p)
}
# una simulación
xsim_model  <- sim_modelo(p = 0.5, n = 500, B=1)
cat("La simulación de estos datos es:", xsim_model, "\n")
B  <- 3000
xsim_3000  <- sim_modelo(p = p_mlike[[1]], n = 500, B=B)
# grafica histograma
ggplot(tibble(xsim_3000), aes(x = xsim_3000)) +
geom_histogram(bins = 20) +
labs(x = "Simulaciones", y = "Frecuencia") +
ggtitle("Histograma de simulaciones del Proceso Generador de Datos", "Bajo el estimador MV") +
theme_bw()
rep_boot  <- function(logv, est_mle, n, B=250){
# create parametric bootstrap
xsim  <- sim_modelo(n = n, p = est_mle, B = B)
# find max verosimilitud for each simulation
mle_sim  <- c()
for (i in 1:B){
log_v_sim  <- logv(n = n, n_err = xsim[i])
optim_sim  <- optimize(log_v_sim, interval = c(0, 1), maximum = TRUE)
mle_sim[i]  <- optim_sim$maximum
}
return(mle_sim)
}
# calcular mv para cada sim
reps_boot  <- rep_boot(logv = bin_loglike, est_mle = p_mlike[[1]], n = 500, B = 3000)
# grafica histograma
ggplot(tibble(reps_boot), aes(x = reps_boot)) +
geom_histogram(bins = 20) +
geom_vline(xintercept = p_mlike$maximum, color = "red", size = 1.5) +
labs(x = "Estimador de max verosimilitud", y = "Frecuencia") +
ggtitle("Histograma de estimadores de max verosimilitud") +
theme_bw()
# descripcion de las simulaciones
cat("descripcion de las simulaciones: \n")
summary(reps_boot)
cat("error estándar del estimador MV muestral \n")
cat(sd(reps_boot))
