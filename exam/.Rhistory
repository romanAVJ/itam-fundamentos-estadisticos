knitr::opts_chunk$set(echo = TRUE, warning=FALSE, error=TRUE, message = FALSE)
library(tidyverse)
library(patchwork)
library(dplyr)
library(purrr)
set.seed(101023)
library(readr)
zapatos <- read_csv("datos/zapatos-1.csv")
glimpse(zapatos)
library(nullabor)
perms_materiales<- lineup(null_permute("material"), zapatos, n = 20)
glimpse(perms_materiales)
graf_materiales <- ggplot(perms_materiales, aes(x= desgaste, y= factor(material))) +
geom_boxplot(aes(group = material)) +
facet_wrap(~.sample) +
labs(
x = "Material",
y = "Material",
title = "Desgaste de materiales",
subtitle = "Por muestra" )
graf_materiales
decrypt("clZx bKhK oL 3OHohoOL BQ")
# Ho = No hay diferencia en el desgaste entre el material A y B.
# H1 = Existe una diferencia en el desgaste entre el material A y B.
# Dado que visualmente no podemos reconocer la gráfica de los datos originales
#( es la número 5), no hay suficiente evidencia para rechazar Ho,
#con un nivel de significancia alpha = 1/20.
# Ho = No hay diferencia en la diferencia de medias de los materiales A y B.
# Es decir que x_bar_a - x_bar_b = 0
# H1 = Existe una diferencia en la diferencia de medias de los materiales A y B.
# Promedio de desgaste de materiales muestra:
prom_desgaste <- zapatos |>
group_by(material) %>%
summarise(prom=mean(desgaste)) |>
ungroup() %>%
pivot_wider(names_from = material, values_from = prom) |>
rename(A = `1`, B = `2`) |>
mutate(diferencia = A - B )
prom_desgaste
# Repeticiones con permutación
reps_materiales <- lineup(null_permute("material"), zapatos, n = 5000)
valores_ref <- reps_materiales |>
group_by(.sample, material) |>
summarise(media = mean(desgaste), .groups = 'drop') |>
pivot_wider(names_from = material, values_from =media) |>
rename(A = `1`, B = `2`) |>
mutate(diferencia = A - B )
g_1 <- ggplot(valores_ref, aes(sample = diferencia)) + geom_qq()  +
geom_hline(yintercept = -0.41, color = "red", linetype = "dashed", linewidth = 1) +
xlab("f") + ylab("diferencia") + labs(subtitle = "Distribución nula o de referencia")
g_2 <- ggplot(valores_ref, aes(x = diferencia)) +
geom_histogram(binwidth = 0.04) +
geom_vline(xintercept = -0.41, color = "red", linetype = "dashed", linewidth = 1)+
coord_flip() + xlab("") + labs(subtitle = " ")
g_1 + g_2
#Nuestra estadística de prueba para la diferencia de medias es T(X) = -0.41, la cual no resulta extrema dada la distribución de referencia. Ésta muestra no aporta mucha evidencia en contra de que los grupos tienen diferencia de medias similares.
dist_ref <- ecdf(valores_ref$diferencia)
valor_p <- 2 * min(dist_ref(prom_desgaste$diferencia),
(1 - dist_ref(prom_desgaste$diferencia)))
valor_p
#La probabilidad de obtener un resultado igual o más extremo que el observado (-0.41), asumiendo que la hipótesis nula es verdadera es de 0.71. No hay evidencia suficiente para rechazar la hipótesis nula. Los resultados no son estadísticamente significativos, y no podemos concluir que la hipótesis alternativa sea más plausible.
zapatos2 <- read_csv("datos/zapatos-2.csv")
glimpse(zapatos2)
# Al cambiar el proceso generador de datos cambia la manera de hacer la prueba
#de hipótesis. Se convierte en un caso de pruebas pareadas donde tenemos que
#verificar para cada niño la diferencia de medias.
##NO ME SALE ESTA PARTE porque no me agarra el df correcto sos
pareadas <- zapatos2 |>
group_split(niño) |>
map_df(~lineup(null_permute("material"), n = 5000)) |>
group_by(.sample, material) |>
summarise(mean_desgaste = mean(desgaste), .groups = 'drop') |>
pivot_wider(names_from = material, values_from =mean_desgaste) |>
rename(A = `1`, B = `2`) |>
mutate(diferencia = A - B ) |>
summarise(diff_means = diff(mean_desgaste))
# preprocesamiento de tablas de datos
computos <- read_delim("datos/20210802-2130_INE-CONSULTA-POPULAR-2021/20210802-2130_COMPUTOS-INE-CP2021.csv",
delim = "|", escape_double = FALSE, trim_ws = TRUE, quote = "\'",
skip = 5)
computos <- computos |>
rename(ID = CLAVE_MRCP) |>
mutate(ESTRATO = str_c(str_pad(ID_ENTIDAD, 2, pad = "0"),
str_pad(ID_DISTRITO_FEDERAL, 2, pad = "0")),
LISTA_NOMINAL = LISTA_NOMINAL_MRCP,
TOTAL = TOTAL_OPINIONES)
muestra <- read_delim("https://ine.mx/wp-content/uploads/2021/08/Conteos-ConsPop21-Lista-MuestraCalculo.txt", delim = "|", skip = 1)
muestra_tidy <- muestra |>
mutate(
ID_ESTADO = str_pad(ID_ESTADO, 2, pad = "0"),
SECCION = str_pad(SECCION, 4, pad = "0"),
ID_CASILLA = str_pad(ID_CASILLA, 2, pad = "0"),
ID = str_c(ID_ESTADO, SECCION, TIPO_CASILLA, ID_CASILLA)
) |>
group_by(ESTRATO) |>
mutate(n = n()) |>
ungroup()
# Primera parte
colnames(muestra_tidy)
colnames(computos)
### Numero total de casillas por estrato N y n casillas seleccionadas para la muestra por estrato:
total_casillas_computos <- computos |>
group_by(ESTRATO) |>
summarise(numero_casillas = n()) |>
left_join(muestra_tidy|> select(ESTRATO,n) |> unique())
## Factor de expansión N/n para cada estrato
total_casillas_computos <- total_casillas_computos |>
mutate(factor_expansion = numero_casillas/n)
votos_muestra <- muestra_tidy |>
select(ESTRATO, SI, NO, NULOS, TOTAL, ID )
### Dividimos por estratos
grupos <- votos_muestra |> group_split(ESTRATO, .keep = TRUE)
### Calculamos el total de SI NO y NULOS por estrato en la muestra:
resultados_si <- map(grupos, function(grupo) {
suma_si <- sum(grupo$SI)
estrato <- unique(grupo$ESTRATO)
return(data.frame(Estrato = estrato, Suma_SI = suma_si))
})
resultados_no <- map(grupos, function(grupo) {
suma_no <- sum(grupo$NO)
estrato <- unique(grupo$ESTRATO)
return(data.frame(Estrato = estrato, suma_NO = suma_no))
})
resultados_nulos <- map(grupos, function(grupo) {
suma_nulos <- sum(grupo$NULOS)
estrato <- unique(grupo$ESTRATO)
return(data.frame(Estrato = estrato, suma_NULOS = suma_nulos))
})
### Calculamos los votos totales por estrato en la muestra:
resultados_totales <- map(grupos, function(grupo) {
suma_totales <- sum(grupo$TOTAL)
estrato <- unique(grupo$ESTRATO)
return(data.frame(Estrato = estrato, suma_TOTALES = suma_totales))
})
### Hago un df con toda la información que necesitamos, "tabla_joins"
todos_resultados <- bind_rows(resultados_si, .id = "Fuente") %>%
inner_join(bind_rows(resultados_no, .id = "Fuente"), by = c("Estrato", "Fuente")) %>%
inner_join(bind_rows(resultados_nulos, .id = "Fuente"), by = c("Estrato", "Fuente")) %>%
inner_join(bind_rows(resultados_totales, .id = "Fuente"), by = c("Estrato", "Fuente"))
todos_resultados <- todos_resultados |>
rename(ESTRATO = Estrato)
tabla_joins <- inner_join(total_casillas_computos, todos_resultados, by = "ESTRATO")
## Vamos a calcular el estimador de razón combinado para muestreo estratificado p gorro para SI, NO y NULOS.
tabla_ponderada_si <- tabla_joins |>
select(ESTRATO, factor_expansion, Suma_SI, suma_TOTALES) |>
mutate(Suma_si_confactor = Suma_SI*factor_expansion, Suma_total_confactor = suma_TOTALES*factor_expansion)
p_gorro_si <- sum(tabla_ponderada_si$Suma_si_confactor)/sum(tabla_ponderada_si$Suma_total_confactor)
tabla_ponderada_no <- tabla_joins |>
select(ESTRATO, factor_expansion, suma_NO, suma_TOTALES) |>
mutate(Suma_no_confactor = suma_NO*factor_expansion, Suma_total_confactor = suma_TOTALES*factor_expansion)
p_gorro_no <- sum(tabla_ponderada_no$Suma_no_confactor)/sum(tabla_ponderada_no$Suma_total_confactor)
tabla_ponderada_nulos <- tabla_joins |>
select(ESTRATO, factor_expansion, suma_NULOS, suma_TOTALES) |>
mutate(Suma_nulos_confactor = suma_NULOS*factor_expansion, Suma_total_confactor = suma_TOTALES*factor_expansion)
p_gorro_nulos <- sum(tabla_ponderada_nulos$Suma_nulos_confactor)/sum(tabla_ponderada_nulos$Suma_total_confactor)
cat("El estimador de razón combinado para muestreo estratificado para SI es:", p_gorro_si)
cat("El estimador de razón combinado para muestreo estratificado para NO es:", p_gorro_no)
cat("El estimador de razón combinado para muestreo estratificado para NULOS es:", p_gorro_nulos)
## Buscamos el error estándar de p gorro $$\hat{p}=\frac{\sum_h \frac{N_h}{n_h} \sum_i Y_{hi}}{\sum_h \frac{N_h}{n_h} \sum_i X_{hi}}$$
## 300 estratos = 300 muestras independientes
## Bootstrap de Rao y Wu
replicas= numeric(1000)
tabla_ponderada_si
calcular_p_gorro <- function(data) {
tabla_ponderada_si <- data %>%
select(ESTRATO, factor_expansion, Suma_SI, suma_TOTALES) %>%
mutate(Suma_si_confactor = Suma_SI * factor_expansion, Suma_total_confactor = suma_TOTALES * factor_expansion)
p_gorro_si <- sum(tabla_ponderada_si$Suma_si_confactor) / sum(tabla_ponderada_si$Suma_total_confactor)
tabla_ponderada_no <- data %>%
select(ESTRATO, factor_expansion, suma_NO, suma_TOTALES) %>%
mutate(Suma_no_confactor = suma_NO * factor_expansion, Suma_total_confactor = suma_TOTALES * factor_expansion)
p_gorro_no <- sum(tabla_ponderada_no$Suma_no_confactor) / sum(tabla_ponderada_no$Suma_total_confactor)
tabla_ponderada_nulos <- data %>%
select(ESTRATO, factor_expansion, suma_NULOS, suma_TOTALES) %>%
mutate(Suma_nulos_confactor = suma_NULOS * factor_expansion, Suma_total_confactor = suma_TOTALES * factor_expansion)
p_gorro_nulos <- sum(tabla_ponderada_nulos$Suma_nulos_confactor) / sum(tabla_ponderada_nulos$Suma_total_confactor)
return(c(p_gorro_si, p_gorro_no, p_gorro_nulos))
}
calcular_p_gorro()
calcular_p_gorro <- function(data) {
tabla_ponderada_si <- data %>%
select(ESTRATO, factor_expansion, Suma_SI, suma_TOTALES) %>%
mutate(Suma_si_confactor = Suma_SI * factor_expansion, Suma_total_confactor = suma_TOTALES * factor_expansion)
p_gorro_si <- sum(tabla_ponderada_si$Suma_si_confactor) / sum(tabla_ponderada_si$Suma_total_confactor)
tabla_ponderada_no <- data %>%
select(ESTRATO, factor_expansion, suma_NO, suma_TOTALES) %>%
mutate(Suma_no_confactor = suma_NO * factor_expansion, Suma_total_confactor = suma_TOTALES * factor_expansion)
p_gorro_no <- sum(tabla_ponderada_no$Suma_no_confactor) / sum(tabla_ponderada_no$Suma_total_confactor)
tabla_ponderada_nulos <- data %>%
select(ESTRATO, factor_expansion, suma_NULOS, suma_TOTALES) %>%
mutate(Suma_nulos_confactor = suma_NULOS * factor_expansion, Suma_total_confactor = suma_TOTALES * factor_expansion)
p_gorro_nulos <- sum(tabla_ponderada_nulos$Suma_nulos_confactor) / sum(tabla_ponderada_nulos$Suma_total_confactor)
return(c(p_gorro_si, p_gorro_no, p_gorro_nulos))
}
set.seed(135343)
num_bootstrap_samples <- 1000
bootstrap_samples <- replicate(num_bootstrap_samples, {
sample_size <- nrow(muestra_tidy)
bootstrap_indices <- sample(1:sample_size, replace = TRUE)
bootstrap_data <- muestra_tidy[bootstrap_indices, ]
calcular_p_gorro(bootstrap_data)  # Aquí se pasa la muestra bootstrap como argumento
})
error_estandar_si <- sd(bootstrap_samples[1, ])
error_estandar_no <- sd(bootstrap_samples[2, ])
bootstrap_samples <- replicate(num_bootstrap_samples, {
sample_size <- nrow(muestra_tidy)
bootstrap_indices <- sample(1:sample_size, replace = TRUE)
bootstrap_data <- muestra_tidy[bootstrap_indices, ]
calcular_p_gorro(bootstrap_data)  # Aquí se pasa la muestra bootstrap como argumento
})
# Reportar los errores estándar
cat("Error estándar p_gorro SI:", error_estandar_si, "\n")
return(c(p_gorro_si, p_gorro_no, p_gorro_nulos))
calcular_p_gorro <- function(data) {
tabla_ponderada_si <- data %>%
select(ESTRATO, factor_expansion, Suma_SI, suma_TOTALES) %>%
mutate(Suma_si_confactor = Suma_SI * factor_expansion, Suma_total_confactor = suma_TOTALES * factor_expansion)
p_gorro_si <- sum(tabla_ponderada_si$Suma_si_confactor) / sum(tabla_ponderada_si$Suma_total_confactor)
tabla_ponderada_no <- data %>%
select(ESTRATO, factor_expansion, suma_NO, suma_TOTALES) %>%
mutate(Suma_no_confactor = suma_NO * factor_expansion, Suma_total_confactor = suma_TOTALES * factor_expansion)
p_gorro_no <- sum(tabla_ponderada_no$Suma_no_confactor) / sum(tabla_ponderada_no$Suma_total_confactor)
tabla_ponderada_nulos <- data %>%
select(ESTRATO, factor_expansion, suma_NULOS, suma_TOTALES) %>%
mutate(Suma_nulos_confactor = suma_NULOS * factor_expansion, Suma_total_confactor = suma_TOTALES * factor_expansion)
p_gorro_nulos <- sum(tabla_ponderada_nulos$Suma_nulos_confactor) / sum(tabla_ponderada_nulos$Suma_total_confactor)
return(c(p_gorro_si, p_gorro_no, p_gorro_nulos))
}
calcular_p_gorro()
tabla_ponderada_si  %>%
select(ESTRATO, factor_expansion, Suma_SI, suma_TOTALES) %>%
mutate(Suma_si_confactor = Suma_SI * factor_expansion, Suma_total_confactor = suma_TOTALES * factor_expansion)
calcular_p_gorro <- function() {
tabla_ponderada_si  %>%
select(ESTRATO, factor_expansion, Suma_SI, suma_TOTALES) %>%
mutate(Suma_si_confactor = Suma_SI * factor_expansion, Suma_total_confactor = suma_TOTALES * factor_expansion)
p_gorro_si <- sum(tabla_ponderada_si$Suma_si_confactor) / sum(tabla_ponderada_si$Suma_total_confactor)
tabla_ponderada_no %>%
select(ESTRATO, factor_expansion, suma_NO, suma_TOTALES) %>%
mutate(Suma_no_confactor = suma_NO * factor_expansion, Suma_total_confactor = suma_TOTALES * factor_expansion)
p_gorro_no <- sum(tabla_ponderada_no$Suma_no_confactor) / sum(tabla_ponderada_no$Suma_total_confactor)
tabla_ponderada_nulos  %>%
select(ESTRATO, factor_expansion, suma_NULOS, suma_TOTALES) %>%
mutate(Suma_nulos_confactor = suma_NULOS * factor_expansion, Suma_total_confactor = suma_TOTALES * factor_expansion)
p_gorro_nulos <- sum(tabla_ponderada_nulos$Suma_nulos_confactor) / sum(tabla_ponderada_nulos$Suma_total_confactor)
return(c(p_gorro_si, p_gorro_no, p_gorro_nulos))
}
alcular_p_gorro
calcular_p_gorro
calcular_p_gorro <- function() {
p_gorro_si <- sum(tabla_ponderada_si$Suma_si_confactor) / sum(tabla_ponderada_si$Suma_total_confactor)
p_gorro_no <- sum(tabla_ponderada_no$Suma_no_confactor) / sum(tabla_ponderada_no$Suma_total_confactor)
p_gorro_nulos <- sum(tabla_ponderada_nulos$Suma_nulos_confactor) / sum(tabla_ponderada_nulos$Suma_total_confactor)
return(c(p_gorro_si, p_gorro_no, p_gorro_nulos))
}
calcular_p_gorro
resultados_bootstrap <- calcular_p_gorro()
resultados_bootstrap <- calcular_p_gorro()
resultados_bootstrap
resultados_bootstrap <- calcular_p_gorro()
set.seed(123)  # Establecemos una semilla para reproducibilidad
num_bootstrap_samples <- 1000
resultados_bootstrap <- replicate(num_bootstrap_samples, {
# Aquí se ejecuta la función calcular_p_gorro 1000 veces y se almacenan los resultados en un vector.
calcular_p_gorro()
})
calcular_p_gorro()
calcular_p_gorro()
num_bootstrap_samples <- 1000
resultados_bootstrap <- replicate(num_bootstrap_samples, {
calcular_p_gorro()
})
set.seed(8373647)
