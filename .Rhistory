mutate(
coverage = (n - (num_failure_left + num_failure_right)),
perc_coverage = 100 * (coverage / n)
)
return(list(df_boot = tibble_ci, df_coverage = tibble_smry))
}
# get coverage
list_cover <- get_coverage(x = xpoiss, realx = trueval, n = 50, B = B)
list_cover$df_coverage
# plot coverage
list_cover$df_boot |>
pivot_wider(names_from = part_ci, values_from = ci) |>
ggplot(aes(num_sample, ymin = lower, ymax = upper)) +
geom_linerange() +
geom_hline(yintercept = trueval, linetype = 1) +
facet_wrap(~ type_ci)
get_coverage <- function(x, realx, n, B){
# plugin as function
plug_boot_fun <- function(i, x, B) {
# sample
boot_sample <- sapply(1:B, function(z) plugin_poiss(sample(x, size = length(x), replace = TRUE)))
# ci
alpha <- 0.05
mean_boot <- mean(boot_sample)
std_boot <- sd(boot_sample)
cinorm <- c(mean_boot + qnorm(alpha/2)*std_boot, mean_boot + qnorm(1-alpha/2)*std_boot)
ciperc <- quantile(boot_sample, p = c(alpha/2, 1-alpha/2))
# return tibble
df_return <- tibble(
estimate = mean_boot,
ci = c(cinorm, ciperc),
part_ci = rep(c("lower", "upper"), times = 2),
type_ci = rep(c("normal", "percentile"), times = 2*c(1, 1)),
num_sample = i
)
return(df_return)
}
# generate n confidence intervals
tibble_ci <- map_df(1:n, plug_boot_fun, x = x, B = B)
# get failures
tibble_smry <- tibble_ci |>
group_by(num_sample, type_ci) |>
summarise(
failure_left = ifelse(realx < ci[part_ci == "lower"], 1, 0),
failure_right = ifelse(realx > ci[part_ci == "upper"], 1, 0),
long = diff(range(ci)),
lower = ci[part_ci == "lower"],
upper = ci[part_ci == "upper"]
) |>
group_by(type_ci) |>
summarise(
num_sims = n,
num_failure_left = sum(failure_left),
num_failure_right = sum(failure_right),
mean_long = mean(long),
min_up = min(upper),
max_low = max(lower)
)  |>
ungroup() |>
mutate(
coverage = (n - (num_failure_left + num_failure_right)),
perc_coverage = 100 * (coverage / n)
)
return(list(df_boot = tibble_ci, df_coverage = tibble_smry))
}
# get coverage
list_cover <- get_coverage(x = xpoiss, realx = trueval, n = 500, B = B)
list_cover$df_coverage
# plot coverage
list_cover$df_boot |>
pivot_wider(names_from = part_ci, values_from = ci) |>
ggplot(aes(num_sample, ymin = lower, ymax = upper)) +
geom_linerange() +
geom_hline(yintercept = trueval, linetype = 1) +
facet_wrap(~ type_ci)
# plot coverage
list_cover$df_boot |>
pivot_wider(names_from = part_ci, values_from = ci) |>
ggplot(aes(num_sample, ymin = lower, ymax = upper)) +
geom_linerange() +
geom_hline(yintercept = trueval, linetype = 1) +
facet_wrap(type_ci ~)
# plot coverage
list_cover$df_boot |>
pivot_wider(names_from = part_ci, values_from = ci) |>
ggplot(aes(num_sample, ymin = lower, ymax = upper)) +
geom_linerange() +
geom_hline(yintercept = trueval, linetype = 1) +
facet_wrap(type_ci ~ .)
# plot coverage
list_cover$df_boot |>
pivot_wider(names_from = part_ci, values_from = ci) |>
ggplot(aes(num_sample, ymin = lower, ymax = upper)) +
geom_linerange() +
geom_hline(yintercept = trueval, linetype = 1) +
facet_wrap(type_ci ~ .)
# plot coverage
list_cover$df_boot |>
pivot_wider(names_from = part_ci, values_from = ci) |>
ggplot(aes(num_sample, ymin = lower, ymax = upper)) +
geom_linerange() +
geom_hline(yintercept = trueval, linetype = 1) +
facet_grid(type_ci ~ .)
# plot coverage
list_cover$df_boot |>
pivot_wider(names_from = part_ci, values_from = ci) |>
ggplot(aes(num_sample, ymin = lower, ymax = upper)) +
geom_linerange(size = 0.01) +
geom_hline(yintercept = trueval, linetype = 1) +
facet_grid(type_ci ~ .)
# plot coverage
list_cover$df_boot |>
pivot_wider(names_from = part_ci, values_from = ci) |>
ggplot(aes(num_sample, ymin = lower, ymax = upper)) +
geom_linerange(size = 0.1) +
geom_hline(yintercept = trueval, linetype = 1) +
facet_grid(type_ci ~ .)
get_coverage <- function(x, realx, n, B){
# plugin as function
plug_boot_fun <- function(i, x, B) {
# sample
boot_sample <- sapply(1:B, function(z) plugin_poiss(sample(x, size = length(x), replace = TRUE)))
# ci
alpha <- 0.05
mean_boot <- mean(boot_sample)
std_boot <- sd(boot_sample)
cinorm <- c(mean_boot + qnorm(alpha/2)*std_boot, mean_boot + qnorm(1-alpha/2)*std_boot)
ciperc <- quantile(boot_sample, p = c(alpha/2, 1-alpha/2))
# return tibble
df_return <- tibble(
estimate = mean_boot,
ci = c(cinorm, ciperc),
part_ci = rep(c("lower", "upper"), times = 2),
type_ci = rep(c("normal", "percentile"), times = 2*c(1, 1)),
num_sample = i
)
return(df_return)
}
# generate n confidence intervals
tibble_ci <- map_df(1:n, plug_boot_fun, x = x, B = B) |>
group_by(num_sample, type_ci) |>
mutate(
failure = ifelse((realx < ci[part_ci == "lower"]) | (realx > ci[part_ci == "upper"]), 1, 0)
)
# get failures
tibble_smry <- tibble_ci |>
group_by(num_sample, type_ci) |>
summarise(
failure_left = ifelse(realx < ci[part_ci == "lower"], 1, 0),
failure_right = ifelse(realx > ci[part_ci == "upper"], 1, 0),
long = diff(range(ci)),
lower = ci[part_ci == "lower"],
upper = ci[part_ci == "upper"]
) |>
group_by(type_ci) |>
summarise(
num_sims = n,
num_failure_left = sum(failure_left),
num_failure_right = sum(failure_right),
mean_long = mean(long),
min_up = min(upper),
max_low = max(lower)
)  |>
ungroup() |>
mutate(
coverage = (n - (num_failure_left + num_failure_right)),
perc_coverage = 100 * (coverage / n)
)
return(list(df_boot = tibble_ci, df_coverage = tibble_smry))
}
# get coverage
list_cover <- get_coverage(x = xpoiss, realx = trueval, n = 500, B = B)
list_cover$df_coverage
# plot coverage
list_cover$df_boot |>
pivot_wider(names_from = part_ci, values_from = ci) |>
ggplot(aes(num_sample, ymin = lower, ymax = upper, color = failure)) +
geom_linerange(size = 0.1) +
geom_hline(yintercept = trueval, linetype = 1) +
facet_grid(type_ci ~ .)
list_cover$df_boot |>
list_cover$df_boot
list_cover$df_boot
list_cover$df_boot |>
pivot_wider(names_from = part_ci, values_from = ci)
# plot coverage
list_cover$df_boot |>
pivot_wider(names_from = part_ci, values_from = ci) |>
ggplot(aes(num_sample, ymin = lower, ymax = upper, color = failure)) +
geom_linerange(size = 0.1) +
geom_hline(yintercept = trueval, linetype = 1) +
facet_grid(type_ci ~ .)
get_coverage <- function(x, realx, n, B){
# plugin as function
plug_boot_fun <- function(i, x, B) {
# sample
boot_sample <- sapply(1:B, function(z) plugin_poiss(sample(x, size = length(x), replace = TRUE)))
# ci
alpha <- 0.05
mean_boot <- mean(boot_sample)
std_boot <- sd(boot_sample)
cinorm <- c(mean_boot + qnorm(alpha/2)*std_boot, mean_boot + qnorm(1-alpha/2)*std_boot)
ciperc <- quantile(boot_sample, p = c(alpha/2, 1-alpha/2))
# return tibble
df_return <- tibble(
estimate = mean_boot,
ci = c(cinorm, ciperc),
part_ci = rep(c("lower", "upper"), times = 2),
type_ci = rep(c("normal", "percentile"), times = 2*c(1, 1)),
num_sample = i
)
return(df_return)
}
# generate n confidence intervals
tibble_ci <- map_df(1:n, plug_boot_fun, x = x, B = B) |>
group_by(num_sample, type_ci) |>
mutate(
failure = factor(ifelse((realx < ci[part_ci == "lower"]) | (realx > ci[part_ci == "upper"]), 1, 0))
)
# get failures
tibble_smry <- tibble_ci |>
group_by(num_sample, type_ci) |>
summarise(
failure_left = ifelse(realx < ci[part_ci == "lower"], 1, 0),
failure_right = ifelse(realx > ci[part_ci == "upper"], 1, 0),
long = diff(range(ci)),
lower = ci[part_ci == "lower"],
upper = ci[part_ci == "upper"]
) |>
group_by(type_ci) |>
summarise(
num_sims = n,
num_failure_left = sum(failure_left),
num_failure_right = sum(failure_right),
mean_long = mean(long),
min_up = min(upper),
max_low = max(lower)
)  |>
ungroup() |>
mutate(
coverage = (n - (num_failure_left + num_failure_right)),
perc_coverage = 100 * (coverage / n)
)
return(list(df_boot = tibble_ci, df_coverage = tibble_smry))
}
# get coverage
list_cover <- get_coverage(x = xpoiss, realx = trueval, n = 500, B = B)
list_cover$df_coverage
# plot coverage
list_cover$df_boot |>
pivot_wider(names_from = part_ci, values_from = ci) |>
ggplot(aes(num_sample, ymin = lower, ymax = upper, color = failure)) +
geom_linerange(size = 0.1) +
geom_hline(yintercept = trueval, linetype = 1) +
facet_grid(type_ci ~ .)
get_coverage <- function(x, realx, n, B){
# plugin as function
plug_boot_fun <- function(i, x, B) {
# sample
boot_sample <- sapply(1:B, function(z) plugin_poiss(sample(x, size = length(x), replace = TRUE)))
# ci
alpha <- 0.05
mean_boot <- mean(boot_sample)
std_boot <- sd(boot_sample)
cinorm <- c(mean_boot + qnorm(alpha/2)*std_boot, mean_boot + qnorm(1-alpha/2)*std_boot)
ciperc <- quantile(boot_sample, p = c(alpha/2, 1-alpha/2))
# return tibble
df_return <- tibble(
estimate = mean_boot,
ci = c(cinorm, ciperc),
part_ci = rep(c("lower", "upper"), times = 2),
type_ci = rep(c("normal", "percentile"), times = 2*c(1, 1)),
num_sample = i
)
return(df_return)
}
# generate n confidence intervals
tibble_ci <- map_df(1:n, plug_boot_fun, x = x, B = B) |>
group_by(num_sample, type_ci) |>
mutate(
failure = factor(ifelse((realx < ci[part_ci == "lower"]) | (realx > ci[part_ci == "upper"]), "yes", "no"))
)
# get failures
tibble_smry <- tibble_ci |>
group_by(num_sample, type_ci) |>
summarise(
failure_left = ifelse(realx < ci[part_ci == "lower"], 1, 0),
failure_right = ifelse(realx > ci[part_ci == "upper"], 1, 0),
long = diff(range(ci)),
lower = ci[part_ci == "lower"],
upper = ci[part_ci == "upper"]
) |>
group_by(type_ci) |>
summarise(
num_sims = n,
num_failure_left = sum(failure_left),
num_failure_right = sum(failure_right),
mean_long = mean(long),
min_up = min(upper),
max_low = max(lower)
)  |>
ungroup() |>
mutate(
coverage = (n - (num_failure_left + num_failure_right)),
perc_coverage = 100 * (coverage / n)
)
return(list(df_boot = tibble_ci, df_coverage = tibble_smry))
}
# get coverage
list_cover <- get_coverage(x = xpoiss, realx = trueval, n = 500, B = B)
list_cover$df_coverage
# plot coverage
list_cover$df_boot |>
pivot_wider(names_from = part_ci, values_from = ci) |>
ggplot(aes(num_sample, ymin = lower, ymax = upper, color = failure)) +
geom_linerange(size = 0.1) +
geom_hline(yintercept = trueval, linetype = 1) +
facet_grid(type_ci ~ .)
trueval
# plot coverage
list_cover$df_boot |>
pivot_wider(names_from = part_ci, values_from = ci) |>
ggplot(aes(num_sample, ymin = lower, ymax = upper, color = failure)) +
geom_linerange(size = 0.1) +
geom_hline(yintercept = trueval, linetype = 1) +
annotate("text", x =  50, y = trueval + 0.001, label = str_glue("True Proba: {round(trueval, 4)}")) +
facet_grid(type_ci ~ .)
# plot coverage
list_cover$df_boot |>
pivot_wider(names_from = part_ci, values_from = ci) |>
ggplot(aes(num_sample, ymin = lower, ymax = upper, color = failure)) +
geom_linerange(size = 0.1) +
geom_hline(yintercept = trueval, linetype = 1) +
annotate("text", x =  50, y = trueval , label = str_glue("True Proba: {round(trueval, 4)}")) +
facet_grid(type_ci ~ .)
# plot coverage
list_cover$df_boot |>
pivot_wider(names_from = part_ci, values_from = ci) |>
ggplot(aes(num_sample, ymin = lower, ymax = upper, color = failure)) +
geom_linerange(size = 0.1) +
geom_hline(yintercept = trueval, linetype = 1) +
annotate("text", x =  50, y = trueval + 0.001, label = str_glue("True Proba: {round(trueval, 4)}")) +
facet_grid(type_ci ~ .)
# get coverage
list_cover <- get_coverage(x = xpoiss, realx = trueval, n = 500, B = 100)
list_cover$df_coverage
list_cover$df_boot |>
pivot_wider(names_from = part_ci, values_from = ci) |>
ggplot(aes(num_sample, ymin = lower, ymax = upper, color = failure)) +
geom_linerange(size = 0.1) +
geom_hline(yintercept = trueval, linetype = 1) +
annotate("text", x =  50, y = trueval + 0.001, label = str_glue("True Proba: {round(trueval, 4)}")) +
facet_grid(type_ci ~ .)
# get coverage
list_cover <- get_coverage(x = xpoiss, realx = trueval, n = 500, B = 20)
list_cover$df_coverage
# get coverage
list_cover <- get_coverage(x = xpoiss, realx = trueval, n = 500, B = 10)
list_cover$df_coverage
list_cover$df_boot |>
pivot_wider(names_from = part_ci, values_from = ci) |>
ggplot(aes(num_sample, ymin = lower, ymax = upper, color = failure)) +
geom_linerange(size = 0.1) +
geom_hline(yintercept = trueval, linetype = 1) +
annotate("text", x =  50, y = trueval + 0.001, label = str_glue("True Proba: {round(trueval, 4)}")) +
facet_grid(type_ci ~ .)
xpoiss
get_coverage <- function(x, realx, n, B){
# plugin as function
plug_boot_fun <- function(i, x, B) {
# sample
boot_sample <- sapply(1:B, function(z) plugin_poiss(sample(x, size = length(x), replace = TRUE)))
# ci
alpha <- 0.05
mean_boot <- mean(boot_sample)
std_boot <- sd(boot_sample)
cinorm <- c(mean_boot + qnorm(alpha/2)*std_boot, mean_boot + qnorm(1-alpha/2)*std_boot)
ciperc <- quantile(boot_sample, p = c(alpha/2, 1-alpha/2))
# return tibble
df_return <- tibble(
estimate = mean_boot,
ci = c(cinorm, ciperc),
part_ci = rep(c("lower", "upper"), times = 2),
type_ci = rep(c("normal", "percentile"), times = 2*c(1, 1)),
num_sample = i
)
return(df_return)
}
# generate n confidence intervals
tibble_ci <- map_df(1:n, plug_boot_fun, x = x, B = B) |>
group_by(num_sample, type_ci) |>
mutate(
failure = factor(ifelse((realx < ci[part_ci == "lower"]) | (realx > ci[part_ci == "upper"]), "yes", "no"))
)
# get failures
tibble_smry <- tibble_ci |>
group_by(num_sample, type_ci) |>
summarise(
failure_left = ifelse(realx < ci[part_ci == "lower"], 1, 0),
failure_right = ifelse(realx > ci[part_ci == "upper"], 1, 0),
long = diff(range(ci)),
lower = ci[part_ci == "lower"],
upper = ci[part_ci == "upper"]
) |>
group_by(type_ci) |>
summarise(
num_sims = n,
num_failure_left = sum(failure_left),
num_failure_right = sum(failure_right),
mean_long = mean(long),
min_up = min(upper),
max_low = max(lower)
)  |>
ungroup() |>
mutate(
coverage = (n - (num_failure_left + num_failure_right)),
perc_coverage = 100 * (coverage / n)
)
return(list(df_boot = tibble_ci, df_coverage = tibble_smry))
}
# get coverage
list_cover <- get_coverage(x = xpoiss, realx = trueval, n = 500, B = B)
list_cover$df_coverage
# plot coverage
list_cover$df_boot |>
pivot_wider(names_from = part_ci, values_from = ci) |>
ggplot(aes(num_sample, ymin = lower, ymax = upper, color = failure)) +
geom_linerange(size = 0.1) +
geom_hline(yintercept = trueval, linetype = 1) +
annotate("text", x =  50, y = trueval + 0.001, label = str_glue("True Proba: {round(trueval, 4)}")) +
facet_grid(type_ci ~ .) +
scale_color_manual(values = c("no" = "gray60", "yes" = "darkred"))
list_cover$df_boot |>
pivot_wider(names_from = part_ci, values_from = ci) |>
ggplot(aes(num_sample, ymin = lower, ymax = upper, color = failure)) +
geom_linerange(size = 0.1) +
geom_hline(yintercept = trueval, linetype = 1) +
annotate("text", x =  50, y = trueval + 0.001, label = str_glue("True Proba: {round(trueval, 4)}")) +
facet_grid(type_ci ~ .) +
scale_color_manual(values = c("no" = "gray60", "yes" = "darkred"))
# get coverage
list_cover <- get_coverage(x = xpoiss, realx = trueval, n = 500, B = 10)
list_cover$df_coverage
list_cover$df_boot |>
pivot_wider(names_from = part_ci, values_from = ci) |>
ggplot(aes(num_sample, ymin = lower, ymax = upper, color = failure)) +
geom_linerange(size = 0.1) +
geom_hline(yintercept = trueval, linetype = 1) +
annotate("text", x =  50, y = trueval + 0.001, label = str_glue("True Proba: {round(trueval, 4)}")) +
facet_grid(type_ci ~ .) +
scale_color_manual(values = c("no" = "gray60", "yes" = "darkred"))
library(tidyverse)
library(latex2exp)
knitr::opts_chunk$set(echo = FALSE, error = TRUE, include = TRUE)
tibble(
norm = cinorm,
perc = ciperc
)
knitr::kable(
tibble(
norm = cinorm,
perc = ciperc
)
)
knitr::kable
?knitr::kable
knitr::kable(
tibble(
norm = cinorm,
perc = ciperc
),
format = "html"
)
knitr::kable(
tibble(
norm = cinorm,
perc = ciperc
),
format = "html"
)
qnorm(alpha/2)
library(tidyverse)
library(latex2exp)
# knitr::opts_chunk$set(echo = FALSE, error = TRUE, include = TRUE)
qnorm(1-alpha/2)
exp(-2 * 3)
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, error=TRUE, message = FALSE)
library(tidyverse)
library(nullabor)
SEED <- 8
# read data
df_shoes  <- read_csv("datos/zapatos-1.csv")
# look data #
df_shoes |> glimpse()
set.seed(SEED)
lineup(
method = null_permute("material"),
true = df_shoes,
n = 20
) |>
mutate(
material = factor(material)
) |>
ggplot(aes(material, desgaste, color = material)) +
geom_boxplot() +
facet_wrap(~.sample, nrow = 4) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 90, hjust = 1)
)
decrypt("sD0f gCdC En JP2EdEPn ZY")
setwd("~/Documents/study/ITAM-MASTER/sem1/stats/itam-fundamentos-estadisticos")
